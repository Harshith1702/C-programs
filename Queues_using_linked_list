#include<stdio.h> 
#include<stdlib.h> 
struct node 
{   
	int   data;    
	struct node *next; 
};
struct node *front = NULL; 
struct node *rear = NULL;    
void insert();   
void deleteElement();   
void display();   
int main ()   
{   
	int  choice = 0; // Initialize choice to avoid undefined behavior 
	printf("\n*************************Main Menu*****************************\n");   
	printf("\n=================================================================\n");   
	printf("\n1.Insert an element\n2.Delete an element\n3.Display the queue\n4.Exit\n");
	while(1)    
	{
		printf("\nEnter your choice:");   
		scanf("%d",&choice);   
		switch(choice)   
		{   
			case 1: insert();   break;   			
			case 2: deleteElement();  break;   
			case 3: display();  break;   
			case 4: exit(0);  	break;   
			default:printf("\nEnter valid choice??\n");   
		}   
	}   
	return 0; 
}   
void insert()   
{   
	struct node *ptr;   
	int item;    
	ptr = (struct node *) malloc (sizeof(struct node));   
	if(ptr == NULL)   
	{   
		printf("\nOVERFLOW\n");
		return; 
	}
	else   
	{    
		printf("\nEnter value?\n");   
		scanf("%d",&item);   
		ptr -> data = item;   
		ptr -> next = NULL; // Initialize next pointer 
		if(front == NULL)   
        {   
            front = ptr;   
            rear = ptr;    
        }   
        else    
        {   
            rear -> next = ptr;   
            rear = ptr;   
        } 
		printf("inserted value is :%d ",item);  
    }   
}      
 
void deleteElement()   
{   
    struct node *ptr;   
	if(front == NULL)   
    {   
        printf("\nUNDERFLOW\n");   
        return;   
    }   
    else    
    {   
		ptr = front;   
        front = front -> next; 
       printf("Deleted node is :%d",ptr->data);  
        free(ptr);  
	}   
}   
void display()   
{   
	struct node *ptr;   
	ptr = front;       
	if(front == NULL)   
	{   
		printf("\nEmpty queue\n");   
	}   
	else   
	{  
		printf("\nprinting values .....\n");   
		while(ptr != NULL)    
		{   
		printf("%d\t",ptr -> data);   
		ptr = ptr -> next;   
		}   
	}   
}  
